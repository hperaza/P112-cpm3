	title	'Hard disk driver for the Modular CP/M 3 BIOS'

;	CP/M-80 Version 3       -- Modular BIOS
;	Disk I/O Module for P112, adapted from Tilmann Reh's hard.280
;	Version 1.0
;	Compile with M80

;  This module assumes the hard disk has been partitioned with the
;  FDISK utility. The initialization routine validates the partition
;  table and finds CP/M-type partitions. The hard-disk geometry and
;  some values in the disk parameter tables are updated, and drive
;  letters enabled or disabled accordingly. Partition units are in
;  16-sector logical tracks (as in UZI180).

	.z80
Z80182	equ	1
	include	Z180.INC
	include	BIOSEQU.INC
	include	P112EQU.INC

	extrn	?bank

	extrn	@dtbl,@rdrv
	extrn	@dma,@trk,@sect,@dbnk,@cbnk
	extrn	@nvram,@nvok

	public	?gide$init
	public	hd0,hd1,hd2,hd3

; IDE Task File Register Definitions

IDEBase	equ	50h		; GIDE base address

IdeDOR	equ	IDEBase+6	; Digital Output Register
IdeDat	equ	IDEBase+8	; Data Register
IdeErr	equ	IDEBase+9	; Error Register
IdeSCnt	equ	IDEBase+0Ah	; Sector Count
IdeSNum	equ	IDEBase+0Bh	; Sector Number
IdeCLo	equ	IDEBase+0Ch	; Cylinder Low
IdeCHi	equ	IDEBase+0Dh	; Cylinder High
IdeSDH	equ	IDEBase+0Eh	; Drive and Head
IdeCmd	equ	IDEBase+0Fh	; Command / Status

; IDE Hard disk commands:

CmdHome	equ	10h		; Recalibrate
CmdRd	equ	20h		; Read Sector
CmdWr	equ	30h		; Write Sector
CmdInit	equ	91h		; Initialize Drive Params
CmdId	equ	0ECh		; Read ID

; Macro: wait for ready (Non-Busy) signal active

WaitRdy	macro
	local	wait
wait:	in	a,(IdeCmd)
	rla
	jr	c,wait
	endm

; Macro: wait for DRQ signal

WaitDrq	macro
	local	wait
wait:	in	a,(IdeCmd)
	bit	3,a
	jr	z,wait
	endm


	dseg	; initialization code in banked memory, since it
		; will be called only once

; Initialise the IDE hard disk, read the partition table and search
; for CP/M partitions.

?gide$init:
	ld	hl,(@dma)
	push	hl
	ld	a,(@dbnk)
	push	af
	ld	hl,hdbuf
	ld	(@dma),hl
	ld	a,(@cbnk)
	ld	(@dbnk),a
;;	call	hd$ident	; identify disk geometry
;;	call	hd$init		; initialize disk with geom params
	call	hd$ptab		; read the partition table
	call	valid$ptable	; validate the partition table
	ld	c,0		; relative drive number
	jr	nz,no$pt

; copy the hard disk geometry values

	ld	hl,(hdbuf+5)
	ld	de,hdbuf
	add	hl,de		; point to disk geometry values
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	(Cyls),de
	ld	a,(hl)
	inc	hl
	ld	(Heads),a
	ld	a,(hl)
	ld	(Secs),a

; now scan the partition table, identify CP/M partitions and setup the
; disk parameter tables accordingly (note relative drive number = 0
; still in C)

	ld	hl,(hdbuf+3)
	ld	de,hdbuf
	add	hl,de		; point to partition table
	ld	b,8		; 8 entries max
pscan:	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	(pstart),de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)
	inc	hl
	ld	(psize),de	; zero size = unused
	ld	a,(hl)
	inc	hl
	inc	hl
	cp	0B2h		; CP/M 3.0 partition?
	jr	z,found
	cp	052h		; CP/M 2.2 partition?
	jr	nz,next
found:	ld	a,d
	or	e
	jr	z,next		; empty partition, ignore it
	push	hl
	ld	hl,@dtbl+4
	ld	e,c
	ld	d,0
	add	hl,de
	add	hl,de
	ld	e,(hl)
	inc	hl
	ld	d,(hl)		; fetch XDPH
	ld	hl,12		; offset to DPB
	add	hl,de
	ld	a,(hl)
	inc	hl
	ld	h,(hl)
	ld	l,a		; DPB address in HL
	ld	de,(pstart)
	dec	hl
	ld	(hl),d
	dec	hl
	ld	(hl),e
	ld	de,5+2		; offset to DSM-1
	add	hl,de
	ld	de,(psize)	; get partition size in tracks
	dec	de
	dec	de		; subtract # of reserved tracks
	ex	de,hl
	add	hl,hl		; obtain number of blocks (DSM)
	ex	de,hl
	dec	de		; DSM-1
	ld	(hl),e		; update DPB field
	inc	hl
	ld	(hl),d
	pop	hl
	inc	c
	ld	a,c
	cp	4
	jr	z,done		; no more than 4 partitions allowed
next:	djnz	pscan
no$pt:	call	clr$drives
done:	pop	af
	ld	(@dbnk),a
	pop	hl
	ld	(@dma),hl
	ret

psign:	db	'P112GIDE'	; partition table signature

; Validate partition table. Returns Z if valid.

valid$ptable:
	ld	hl,hdbuf+7
	ld	de,psign
	ld	b,8
pchk:	ld	a,(de)
	cp	(hl)
	ret	nz
	inc	hl
	inc	de
	djnz	pchk
	ret

; Hard disk initialization

hd$init:
	if 0	; rely on BOOT ROM initialization for now...
	ld	a,6
	out	(IdeDOR),a	; set software reset
	ld	b,0
	djnz	$		; wait a short time (3 us minimum)
	ld	a,2
	out	(IdeDOR),a	; deactivate software reset
	ld	hl,1000
hdi_1:	ld	b,0
	djnz	$
	dec	hl
	ld	a,h
	or	l		; timeout expired?
	jr	z,hdi_ex	; yes: erase drive's DPHs
	in	a,(IdeCmd)
	bit	7,a
	jr	nz,hdi_1	; otherwise wait for Non-Busy
	and	11111001b
	cp	01010000b	; Status: Ready & NoError ?
	jr	nz,hdi_1	; no --> keep waiting
	ld	a,(Secs)
	out	(IdeSCnt),a	; set sector count
	ld	hl,(Cyls)
	ld	a,l
	out	(IdeCLo),a
	ld	a,h
	out	(IdeCHi),a	; set cylinder count
	ld	a,(Heads)
	dec	a		; Heads-1
	or	0A0h
	out	(IdeSDH),a	; set number of heads
	ld	a,cmdinit	; command: Initialise
	out	(IdeCmd),a	; output command: set params
	endif
	ret

; Initialization failed: clear the corresponding DPB entries in drive table.

hdi_ex:	ld	c,0		; clear all partitions (0..3)
				; ..fall thru..

; Clear drive letters corresponding to relative drive number in C and up.

clr$drives:
	ld	hl,@dtbl+4	; point to first HD entry (drive C:)
	ld	a,4
	sub	c
	ret	z
	ret	c
	ld	b,a
	ld	e,c
	ld	d,0
	add	hl,de
	add	hl,de
clrdr1:	ld	(hl),0		; disable drive
	inc	hl
	ld	(hl),0
	inc	hl
	djnz	clrdr1
	ret

; Drive login. Nothing to do, just return.

hd$login:
	ret

; Read ID from Hard Disk

hd$ident:
	di			; just in case
	ld	a,(@cbnk)
	push	af		; save current bank
	ld	a,(@dbnk)
	call	?bank		; select bank for disk I/O
	WaitRdy
	ld	a,CmdId
	out	(IdeCmd),a	; command: read sector data
	WaitDrq			; wait for DRQ to become active
	ld	hl,(@dma)	; get target address
	ld	bc,IdeDat	; B = 0 (counter), C = I/O address
	inir
	inir			; read 512 data bytes (2 x 256)
	pop	af
	call	?bank		; re-select previous bank
	WaitRdy
	in	a,(IdeCmd)	; check final drive status
	and	10001001b	; Busy, DRQ, or Error?
	ei
	ret	z		; no: everything is ok
	ld	a,1		; return with A=1 on error
	ret

	cseg	; must be in common memory, since we only support
		; transfers to the currently selected bank

; Read partition table (C/H/S = 0/0/0)

hd$ptab:
	di			; just in case
	ld	a,(@cbnk)
	push	af		; save current bank
	ld	a,(@dbnk)
	call	?bank		; select bank for disk I/O
	WaitRdy
	ld	a,1		; sector base is at 1
	out	(IdeSNum),a	; send to GIDE register
	dec	a		; head 0
	or	0A0h		; assume unit 0, master
	out	(IdeSDH),a	; send to GIDE register
	ld	a,0		; cylinder 0
	out	(IdeCLo),a
	out	(IdeCHi),a	; send cylinder number to GIDE
	ld	a,0AAh
	out	(IdeErr),a	; activate retries w/pattern in GIDE error reg
	ld	a,1		; one sector to read or write
	out	(IdeSCnt),a	; set sector count
	jr	hdrd1		; finish through common disk read code

; Read data from Hard Disk

hd$read:
	di			; just in case
	ld	a,(@cbnk)
	push	af		; save current bank
	ld	a,(@dbnk)
	call	?bank		; select bank for disk I/O
	call	hd$prep		; prepare task file registers
hdrd1:	WaitRdy
	ld	a,CmdRd
	out	(IdeCmd),a	; command: read sector data
	WaitDrq			; wait for DRQ to become active
	ld	hl,(@dma)	; get target address
	ld	bc,IdeDat	; B = 0 (counter), C = I/O address
	inir
	inir			; read 512 data bytes (2 x 256)
	pop	af
	call	?bank		; re-select previous bank
	WaitRdy
	in	a,(IdeCmd)	; check final drive status
	and	10001001b	; Busy, DRQ, or Error?
	ei
	ret	z		; no: everything is ok
	ld	a,1		; return with A=1 on error
	ret

; Write data to Hard Disk.

hd$write:
	di
	ld	a,(@cbnk)
	push	af		; save current bank
	ld	a,(@dbnk)
	call	?bank		; select bank for disk I/O
	call	hd$prep		; prepare task file registers
	WaitRdy
	ld	a,CmdWr
	out	(IdeCmd),a	; command: write sector data
	WaitDrq			; wait for data requested
	ld	hl,(@dma)	; get destination address
	ld	bc,IdeDat	; B = 0 (counter), C = I/O address
	otir
	otir			; write 512 data bytes (2 x 256)
	pop	af
	call	?bank		; re-select previous bank
	WaitRdy
	in	a,(IdeCmd)	; check final drive status
	and	10001001b	; Busy, DRQ, or Error?
	ei
	ret	z		; no: everything is ok
	ld	a,1		; return with A=1 on error
	ret

; Prepare hard disk for data transfer. The physical sector address
; is written to the appropriate IDE registers.

hd$prep:
	WaitRdy
	ld	hl,dpbhd0
	ld	a,(@rdrv)
	or	a
	jr	z,hdpre2
	ld	de,dpbsize
hdpre1:	add	hl,de
	dec	a
	jr	nz,hdpre1
hdpre2:	dec	hl
	ld	a,(hl)		; get track offset for this logical unit
	dec	hl
	ld	l,(hl)
	ld	h,a		;  into HL
	xor	a
	ld	de,(@trk)
	add	hl,de		; add track number
	adc	a,0		; with 20-bit result
	ld	b,4
mul16:	add	hl,hl		; multiply by 16
	adc	a,a		; with 20-bit result
	djnz	mul16
	ld	de,(@sect)	; get sector number (0-based)
	add	hl,de		; add desired relative block number
	adc	a,0		; to 20-bit resulting block number
	ld	c,a

; This routine uses physical drive characteristics from included file.
; This routine computes Head, Sector and Track from a sequential block number
; defined by; Trk_Offset * 16 + Block#.
;
; The Physical characteristics needed are:
;   Heads  = Number_of_Heads and
;   Secs   = Sectors_per_Track
;
; Computation of the CHS address is per:
;
;   Sector := (Block# MOD hdSPT)+1    (* Quotient1 := Block# DIV hdSPT    *)
;   Head   := Quotient1 MOD hdHds     (* Quotient2 := Quotient1 DIV hdHds *)
;   Track  := Quotient2
;
; Prepare for Disk Read/Write by Preloading all Registers

	ld	a,(Secs)	; load number of sectors per track
	ld	e,a
	call	divide		; divide CHL by E
	inc	a		; make sector number base at 1
	out	(IdeSNum),a	; send to GIDE register
	ld	a,(Heads)	; get number of heads
	ld	e,a
	call	divide		; divide CHL (quotient from above) by E
	or	0A0h		; assume unit 0, master
	out	(IdeSDH),a	; send to GIDE register
	ld	a,l
	out	(IdeCLo),a
	ld	a,h
	out	(IdeCHi),a	; send cylinder number to GIDE
	ld	a,0AAh
	out	(IdeErr),a	; activate retries w/pattern in GIDE error reg
	ld	a,1		; one sector to read or write
	out	(IdeSCnt),a	; set sector count
	ret

; Divide 24-bit Number by 8-bit Number returning Quotient and Remainder
; Enter: CHL = 24-bit Unsigned Dividend
;	 E = 8-bit Unsigned Divisor
; Exit : CHL = 24-bit Quotient
;	 A = 8-bit Remainder
; Uses : AF,BC,HL

divide:	ld	b,24+1		; 25 times thru Loop
	xor	a		; Clear Remainder and Carry
Div:	adc	a,a		; Shift Accum Left + Carry
	sbc	a,e		;  Subtract Divisor
	jr	nc,Div0		; ..jump if it Worked
	add	a,e		; Else restore Accum & Carry
Div0:	ccf			; Flip Carry Bit
	adc	hl,hl		;  Shift any Carry into
	rl	c		;   Dividend/Quotient
	djnz	Div		;  ..loop til Done
	ret

;***********************************************************************

	dseg	;DPH's can be banked

	; Extended Disk Parameter Headers (XDPHs)

	dw	hd$write
	dw	hd$read
	dw	hd$login
	dw	hd$init
	db	0		; relative drive zero
	db	0		; media type
hd0:	dw	0		; translate table address
	db	0,0,0,0,0,0,0,0,0 ; BDOS scratch area
	db	0		; media flag
	dw	dpbhd0		; disk parameter block
	dw	0		; no checksum vector (non-removable media)
	if	banked
	dw	alv0
	else
	dw	0FFFEh		; allocation vector by GENCPM
	endif
	dw	0FFFEh		; DIRBCB allocated by GENCPM
	dw	0FFFEh		; DTABCB allocated by GENCPM
	dw	0FFFEh		; HASH allocated by GENCPM
	db	0		; HASH bank

	dw	hd$write
	dw	hd$read
	dw	hd$login
	dw	hd$init
	db	1		; relative drive 1
	db	0		; media type
hd1:	dw	0		; translate table address
	db	0,0,0,0,0,0,0,0,0 ; BDOS scratch area
	db	0		; media flag
	dw	dpbhd1		; disk parameter block
	dw	0		; no checksum vector (non-removable media)
	if	banked
	dw	alv1
	else
	dw	0FFFEh		; allocation vector by GENCPM
	endif
	dw	0FFFEh		; DIRBCB allocated by GENCPM
	dw	0FFFEh		; DTABCB allocated by GENCPM
	dw	0FFFEh		; HASH allocated by GENCPM
	db	0		; HASH bank

	dw	hd$write
	dw	hd$read
	dw	hd$login
	dw	hd$init
	db	2		; relative drive 2
	db	0		; media type
hd2:	dw	0		; translate table address
	db	0,0,0,0,0,0,0,0,0 ; BDOS scratch area
	db	0		; media flag
	dw	dpbhd2		; disk parameter block
	dw	0		; no checksum vector (non-removable media)
	if	banked
	dw	alv2
	else
	dw	0FFFEh		; allocation vector by GENCPM
	endif
	dw	0FFFEh		; DIRBCB allocated by GENCPM
	dw	0FFFEh		; DTABCB allocated by GENCPM
	dw	0FFFEh		; HASH allocated by GENCPM
	db	0		; HASH bank

	dw	hd$write
	dw	hd$read
	dw	hd$login
	dw	hd$init
	db	3		; relative drive 3
	db	0		; media type
hd3:	dw	0		; translate table address
	db	0,0,0,0,0,0,0,0,0 ; BDOS scratch area
	db	0		; media flag
	dw	dpbhd3		; disk parameter block
	dw	0		; no checksum vector (non-removable media)
	if	banked
	dw	alv3
	else
	dw	0FFFEh		; allocation vector by GENCPM
	endif
	dw	0FFFEh		; DIRBCB allocated by GENCPM
	dw	0FFFEh		; DTABCB allocated by GENCPM
	dw	0FFFEh		; HASH allocated by GENCPM
	db	0		; HASH bank

	if	banked
alv0:	ds	(8188/4)+2
alv1:	ds	(8188/4)+2
alv2:	ds	(8188/4)+2
alv3:	ds	(8188/4)+2
	endif

hdbuf:	ds	512		; temporary buffer for HD ident and
				;   partition table
pstart:	dw	0		; temporary partition table values
psize:	dw	0

	cseg	;DPB must be resident

	dw	0		; partition starting track
dpbhd0:	dw	64		; 128-byte sectors per logical track
	db	5		; block shift factor (4k blocks)
	db	31		; block mask
	db	1		; extent mask
	dw	8187		; max block number (disk size - 1) (32M max)
	dw	2047		; directory entries - 1
	db	11111111b	; dir blocks alloc0
	db	11111111b	; dir blocks alloc1
	dw	8000h		; check vector size
	dw	2		; reserved tracks
	db	2		; physical record shift factor (512-byte sectors)
	db	3		; physical record mask

dpbsize	equ	($ - dpbhd0) + 2

	dw	0		; partition starting track
dpbhd1:	dw	64		; 128-byte sectors per logical track
	db	5		; block shift factor (4k blocks)
	db	31		; block mask
	db	1		; extent mask
	dw	8187		; max block number (disk size - 1) (32M max)
	dw	2047		; directory entries - 1
	db	11111111b	; dir blocks alloc0
	db	11111111b	; dir blocks alloc1
	dw	8000h		; check vector size
	dw	2		; reserved tracks
	db	2		; physical record shift factor (512-byte sectors)
	db	3		; physical record mask

	dw	0		; partition starting track
dpbhd2:	dw	64		; 128-byte sectors per logical track
	db	5		; block shift factor (4k blocks)
	db	31		; block mask
	db	1		; extent mask
	dw	8187		; max block number (disk size - 1) (32M max)
	dw	2047		; directory entries - 1
	db	11111111b	; dir blocks alloc0
	db	11111111b	; dir blocks alloc1
	dw	8000h		; check vector size
	dw	2		; reserved tracks
	db	2		; physical record shift factor (512-byte sectors)
	db	3		; physical record mask

	dw	0		; partition starting track
dpbhd3:	dw	64		; 128-byte sectors per logical track
	db	5		; block shift factor (4k blocks)
	db	31		; block mask
	db	1		; extent mask
	dw	8187		; max block number (disk size - 1) (32M max)
	dw	2047		; directory entries - 1
	db	11111111b	; dir blocks alloc0
	db	11111111b	; dir blocks alloc1
	dw	8000h		; check vector size
	dw	2		; reserved tracks
	db	2		; physical record shift factor (512-byte sectors)
	db	3		; physical record mask

; Hard disk geometry definitions

Cyls:	dw	1024		; WD Tidbit-60
Heads:	db	7
Secs:	db	17

	end
